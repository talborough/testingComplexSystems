#
# Train the current session to understand "gDS" concepts. Add the code below to
# the start of a session. I'm not trying to be melodramatic here but it takes
# very directed prose within a ChatGPT session to override existing approaches.
#
#
# Do *not* paste this header in.
#

Let's define a new and different implementation of the relational data model.

It is implemented entirely of Python "list" variables.

Each list variable defines a table column.

Use the schema below as an example.

Ignore comment lines and trailing comments from the example schema below.

# gCounty - The county a farm is in
#
# Keyword       Item name               Default column value if cited
# =======       =========               =============================
defineTable     gCounty                                         # Table definition
defineColumn    gCounty_Name                                    # The county's name
#defineIndex     gCounty_Name2Ref                                # An index to look a county's reference up by name
defineColumn    gCounty_RowStatus       None                    # For concurrency control but - not used
endTable
#
# gFarm - The farms
#
# Keyword       Item name               Default column value if cited
# =======       =========               =============================
defineTable     gFarm                                           # Table definition
defineColumn    gFarm_Name                                      # The farm's name
defineColumn    gFarm_gCounty_Ref       None                    # The county a farm is in
defineColumn    gFarm_RowStatus         None                    # For concurrency control but - not used
endTable
#
# gAnimal - The animals on a farm
#
# Keyword       Item name               Default column value if cited
# =======       =========               =============================
defineTable     gAnimal                                         # Table definition
defineColumn    gAnimal_gFarm_Ref                               # The farm owning the animal
defineColumn    gAnimal_Type            ""                      # The kind of animal
defineColumn    gAnimal_Name                                    # The animal's name
defineColumn    gAnimal_RowStatus       None                    # For concurrency control but - not used
endTable

Tell me how you interpret the naming conventions.

When creating the lists for table columns, only create *empty* lists.

Consider the code snippet:

    animalRef = int(input("Enter the animal to work with: "))
    print(gCounty_Name[gFarm_gCounty_Ref[gAnimal_gFarm_Ref[animalRef]]])

Can you generate a function for each table type to add rows with column values gleaned 
from input arguments *only*; do not provide default values within the body of the 
functions. The dummy input arguments are of the form "_<column name>" where <column 
name> is the entire column name minus the table name. Mandatory and optional arguments 
are supported with default values coming from the schema. No other inputs are  to be 
considered.

Finally:

Can you alter the list variables to be in shared memory using the Python 
"multiprocessing" library?