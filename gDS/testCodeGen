#!/usr/bin/python3

#####
#
# The overall goal is to have a completely self-contained gDSCodeGen test facility.
#
# This provokes errors from the code generator by presenting a suitably invalid data
# definition file to it and verifying the output error message.
#
#####

import subprocess
import sys

CodeLines = []                      # Hold all the lines of this program to service extraction of embedded code


##################################
#
# Issue a command locally and get the goodies back to the caller
#
##################################
def issueCmdLocal(cmd, debug = False):

    returnObject = subprocess.run(cmd, capture_output=True, text=True, shell=True)

    if debug:
        print (returnObject)

    return (returnObject.returncode, returnObject.stdout, returnObject.stderr)
    

#
# This supports extracting in-line text blocks at run time.
# It's good for templates and "help" blocks.
#
class InLineText:

    codeLines = []

    def getCodeLines():
    
        InLineText.codeLines = open(sys.argv[0], "r").read().splitlines()


    def getText(tag, substitutionList = []):

        lineRef = 0
        harvestingText = False
        harvestedText = ''

        while lineRef <= len(InLineText.codeLines):

            line = InLineText.codeLines[lineRef]
            lineRef += 1

            if (not harvestingText) and ('""" - ' in line):
                indent = line.find('"""')
                line = line[indent:]
                line = line.replace('""" - ', "")
                if line == tag:
                    harvestingText = True
                    
            elif (not harvestingText) and (lineRef == len(InLineText.codeLines)):
                print ("Can not find in-line text tag '%s'" % (tag))
                x = 1/0

            elif harvestingText and ('"""' in line):
                return (harvestedText % (substitutionList))
                
            elif harvestingText:
                harvestedText += line[indent:] + "\n"


##################################
#
# Run one test - extract and shove a .dd file through gDSCodeGen and verify the output essage generated
#
##################################
def runOneTest(dataTag):

    fileDesc = open("testFile.dd", "w")
    fileDesc.write(InLineText.getText(f"{dataTag} data"))
    fileDesc.close()
    
    expectedOutput = InLineText.getText(f"{dataTag} expected output")[:-1]
    
    (retCode, stdout, stderr) = issueCmdLocal(f"./gDSCodeGen testFile")
    
    actualOutput = stdout.splitlines()[1]
    if actualOutput != expectedOutput:
    
        print (f"{dataTag} - Error - Expected - {expectedOutput} \n                Actual - {actualOutput}")
        print ("")
        exit (1)
        
    else:
       
        print (f"{dataTag} - Success - {actualOutput}")
        (retCode, stdout, stderr) = issueCmdLocal(f"rm testFile.dd testFile.py")


##################################
#
# Mainline code
#
##################################
#

print ("")
print ("If the error output looks a little mysterious run './gDSCodeGen testFile' directly")

#
# Load in this program's code for in-line text extraction
#
InLineText.getCodeLines()

print ("")


########################################

""" - A01 data
#
#
defineTable xxx
abcd
#
"""

""" - A01 expected output
Keyword 'abcd' not in vocabulary at line 4 of the input file
"""

runOneTest("A01")


########################################

""" - A02 data
#
#
defineTable x_xx

"""

""" - A02 expected output
A 'defineTable' was found with underscores in the table name at line 3 of the input file
"""

runOneTest("A02")


########################################

""" - B01 data
#
#
defineTable xxx
defineTable xxx
#
"""

""" - B01 expected output
A 'defineTable' was found before the previous table definition ended at line 4 of the input file
"""

runOneTest("B01")


########################################

""" - B02 data
#
#
defineColumn xxx
#
"""

""" - B02 expected output
Inner keywords found before 'defineTable' at line 3 of the input file
"""

runOneTest("B02")


########################################

""" - B03 data
#
#
defineTable xxx
defineUnary
#
"""

""" - B03 expected output
An invalid keyword was found inside the table definition at line 4 of the input file
"""

runOneTest("B03")


########################################

""" - B04 data
#
#
defineTable xxx
#
"""

""" - B04 expected output
An 'endTable' was missing at line 4 of the input file
"""

runOneTest("B04")


########################################

""" - B05 data
#
#
defineTable xxx
defineColumn xxx_ColA
defineColumn xxy_ColB
endTable
#
"""

""" - B05 expected output
Inner keywords do not start with current table name at line 5 of the input file
"""

runOneTest("B05")


########################################

""" - C01 data
#
#
defineTable xxx
defineColumn xxx_ColA
defineColumn xxx_ColA
defineColumn xxx_Name
defineColumn xxx_RowStatus
endTable
#
"""

""" - C01 expected output
Duplicate element name 'xxx_ColA' defined at line 5 of the input file
"""

runOneTest("C01")


########################################


""" - C02 data
#
#
defineTable xxx
defineColumn xxx_ColA
defineColumn xxx_ColB_
defineColumn xxx_Name
defineColumn xxx_RowStatus
endTable
#
"""

""" - C02 expected output
Leading or trailing underscores are not allowed at line 5 of the input file
"""

runOneTest("C02")


########################################

""" - J01 data
#
#
defineTable xxx
defineColumn xzx_Name
defineColumn xxx_RowStatus
endTable
#
"""

""" - J01 expected output
Inner keywords do not start with current table name at line 4 of the input file
"""

runOneTest("J01")


########################################

""" - D01 data
#
#
defineTable xxx
defineColumn xxx_Col1
defineColumn xxx_yyy__Ref
defineColumn xxx_Name
defineColumn xxx_RowStatus
endTable

defineTable yyy
defineColumn yyy_Name
defineColumn yyy_RowStatus
endTable
#
"""

""" - D01 expected output
Reference column mis-formatted at line 5 of the input file
"""

runOneTest("D01")


########################################

""" - D02 data
#
#
defineTable xxx
defineColumn xxx_Col1
defineColumn xxx_xxx_Ref
defineColumn xxx_Name
defineColumn xxx_RowStatus
endTable

defineTable yyy
defineColumn yyy_Name
defineColumn yyy_RowStatus
endTable
#
"""

""" - D02 expected output
Reference column cites current table at line 5 of the input file
"""

runOneTest("D02")


########################################

""" - D03 data
#
#
defineTable xxx
defineColumn xxx_Col1
defineColumn xxx_zzz_Ref
defineColumn xxx_Name
defineColumn xxx_RowStatus
endTable

defineTable yyy
defineColumn yyy_Name
defineColumn yyy_RowStatus
endTable
#
"""

""" - D03 expected output
Reference column refers to a non-existant table at line 5 of the input file
"""

runOneTest("D03")


########################################

""" - E01 data
#
#
defineTable xxx
defineColumn xxx_Col1
defineColumn xxx_yyy_Ref
defineIndex xxx_Name_2Ref
defineColumn xxx_Name
defineColumn xxx_RowStatus
endTable

defineTable yyy
defineColumn yyy_Name
defineColumn yyy_RowStatus
endTable
#
"""

""" - E01 expected output
Index column mis-formatted at line 6 of the input file
"""

runOneTest("E01")


########################################

""" - E02 data
#
#
defineTable xxx
defineColumn xxx_Col1
defineColumn xxx_yyy_Ref
defineIndex xxx_Name2Re
defineColumn xxx_Name
defineColumn xxx_RowStatus
endTable

defineTable yyy
defineColumn yyy_Name
defineColumn yyy_RowStatus
endTable
#
"""

""" - E02 expected output
Index specification does not end with '2Ref' at line 6 of the input file
"""

runOneTest("E02")


########################################

""" - E03 data
#
#
defineTable xxx
defineColumn xxx_Col1
defineColumn xxx_yyy_Ref
defineIndex xxx_Namez2Ref
defineColumn xxx_Name
defineColumn xxx_RowStatus
endTable

defineTable yyy
defineColumn yyy_Name
defineColumn yyy_RowStatus
endTable
#
"""

""" - E03 expected output
Index specification 'Namez' doesn't appear in table definition at line 9 of the input file
"""

runOneTest("E03")


########################################

""" - F01 data
#
#
defineTable xxx
defineColumn xxx_Col1
defineColumn xxx_yyy_Ref
defineColumn xxx_RowStatus
endTable

defineTable yyy
defineColumn yyy_Name
defineColumn yyy_RowStatus
endTable
#
"""

""" - F01 expected output
Table 'xxx' doesn't have a Name column at line 7 of the input file
"""

runOneTest("F01")


########################################

""" - F02 data
#
#
defineTable xxx
defineColumn xxx_Col1
defineColumn xxx_yyy_Ref
defineColumn xxx_Name
endTable

defineTable yyy
defineColumn yyy_Name
defineColumn yyy_RowStatus
endTable
#
"""

""" - F02 expected output
Table 'xxx' doesn't have a RowStatus column at line 7 of the input file
"""

runOneTest("F02")


########################################

""" - H01 data
#
#
defineTable xxx
defineColumn xxx_Col1
defineColumn xxx_yyy_Ref
defineColumn xxx_Name
defineColumn xxx_RowStatus
endTable

defineList qqq 123

defineTable yyy
defineColumn yyy_Name
defineColumn yyy_RowStatus
endTable
#
"""

""" - H01 expected output
'defineList/Dict' can not have an initial value at line 10 of the input file
"""

runOneTest("H01")


########################################

""" - I01 data
#
#
defineTable xxx
defineColumn xxx_Col1
defineColumn xxx_yyy_Ref
defineColumn xxx_Name
defineColumn xxx_RowStatus
endTable

defineList qqq

defineUnary nnn

defineTable yyy
defineColumn yyy_Name
defineColumn yyy_RowStatus
endTable
#
"""

""" - I01 expected output
'defineUnary' must have an initial value at line 12 of the input file
"""

runOneTest("I01")


print ("")