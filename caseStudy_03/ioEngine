#!/usr/bin/python3

import sys
import io
import os
import time
import getopt


#########################
#
# ioEngine - Do I/O to a file hoping to find some problems.
#            See help at the end for its operation.
#
# Return codes:
#
# returnCode = 0           !          # Perfect result in w/r logic (+)
# returnCode = 1           !          # Perfect verify of existing file (+)
# returnCode = 14          --14       # Bad pass number after fixing it once (X)
# returnCode = 15          !          # File too large (X)
# returnCode = 16          !          # Data compare error in w/r logic (X)
# returnCode = 17          !          # Data compare error in verification logic (X)
# returnCode = 18          --18       # Clean premature EOF (+)
# returnCode = 19          --19       # Fixed pass number once -  clean (+)
# returnCode = 20          !          # Missing file (+)
# returnCode = 21          !          # Empty file (+)
# returnCode = 22          !          # Bad file start (X)

#
# X = Stop after failure
# + = Count in platform UI
# ! = Verify by hand
# --nn = Generate bad file
#
#########################

##########################################
#
# Handle in-line documentation/text (text in this source file
#   can be extracted at run time and used for help or templates)
#
##########################################
class InLineText:

    codeLines = []

    def getCodeLines():
    
        InLineText.codeLines = open(sys.argv[0], "r").read().splitlines()


    def getText(tag, substitutionList = []):

        lineRef = 0
        harvestingText = False
        harvestedText = ''

        while lineRef <= len(InLineText.codeLines):

            line = InLineText.codeLines[lineRef]
            lineRef += 1

            if (not harvestingText) and ('""" - ' in line):
                indent = line.find('"""')
                line = line[indent:]
                line = line.replace('""" - ', "")
                if line == tag:
                    harvestingText = True
                    
            elif (not harvestingText) and (lineRef == len(InLineText.codeLines)):
                print ("Can not find in-line text tag '%s'" % (tag))
                x = 1/0

            elif harvestingText and ('"""' in line):
                return (harvestedText % (substitutionList))
                
            elif harvestingText:
                harvestedText += line[indent:] + "\n"


#################################################
#
# Work with the data
#
#################################################
class Data:

    """ - Data block
    File number         = %%8.8d
    Pass                = %%8.8d
    Record              = %%8.8d
    Block               = %%8.8d
    """
    
    recordTemplate = "<none>"
    recordData = "<none>"

    blockFormatString = None
    blocksPerRecord = 7
    charsPerRecord = None
    recordsPerFile = 51
    charsPerFile = None
    passesPerFile = 10
    
    recordNumber = 0
    passNumber = 0
    
    def initDataAttributes():
    
        # Pull format string from above and place it in a live variable
        Data.blockFormatString = InLineText.getText("Data block")
    
        # Finish initing data geometry / variables
        Data.makeRecordTemplate(1, 2, 3)
        Data.charsPerRecord = len(Data.recordTemplate)
        Data.charsPerFile = Data.charsPerRecord * Data.recordsPerFile
        
        return
        
    def makeRecordTemplate(fileNumber, passNumber, recordNumber):
    
        Data.recordTemplate = ""
        
        for blockNumber in range(Data.blocksPerRecord):
            Data.recordTemplate += Data.blockFormatString % (fileNumber, passNumber, \
                                                             recordNumber,  blockNumber)
    
        Data.recordTemplate += "** End of Record ** \n"

        return
        
    def dumpDetails(dumpData = True):
    
        print ("")
        print ("Chars per record    = ", Data.charsPerRecord)
        print ("Records per file    = ", Data.recordsPerFile)
        print ("Chars per file      = ", Data.charsPerFile)
        print ("Passes per file     = ", Data.passesPerFile)
        print ("Current pass number = ", Data.passNumber)
        if dumpData:
            print ("")
            print ("Template record     = ")
            print ("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv")
            print (Data.recordTemplate)
            print ("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
            print ("File record         = ")
            print ("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv")
            print (Data.recordData)
            print ("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
        
        return
#
# Work with the basic operation of the program
#
class UI:

    filenameInBinary = None             # The binary value of the file name
    filenameInDecimalString = None      # A 10-digit decimal string representation of the above value
    dataFileLocation = None             # Where to put the data file

    forceDataCompareFault = False       # Trigger a data compare error
    
    screenUpdateTime = time.time()      # Update sceen every few seconds
    
    pauseTime = 0.01                    # Wait between write / read 
    
    normalWriteReadProcessing = True    # "Normal" operation
    justVerifyFile = False              # Just verify the given file
    
    #
    # Make files with errors in them
    #
    makePrematureEOF = False # (18)
    makeOnePassNumberChange = False # (19)
    makeTwoPassNumberChange = False # (14)

    #
    # Process command line arguments
    #
    def processArgs():
    
        try:
            opts, args = getopt.getopt(sys.argv[1:], "h", ["help",
                           "mp=",
                           "pt=",
                           "vf",
                           "ff",
                           "14",
                           "18",
                           "19",
                                ])
        except getopt.GetoptError as err:
            print ("")
            print (err)
            print ("")
            x = 1/0

        for i in range(0, len(opts)):

            if opts[i][0] in ("-h", "--help"):
                print (InLineText.getText("Help"))
                exit (0)

            elif opts[i][0] == ("--mp"):
                Data.passesPerFile = int(opts[i][1])

            elif opts[i][0] == ("--vf"):
                UI.normalWriteReadProcessing = False
                UI.justVerifyFile = True

            elif opts[i][0] == ("--ff"):
                UI.forceDataCompareFault = True

            elif opts[i][0] == ("--14"):
                UI.normalWriteReadProcessing = False
                UI.makeTwoPassNumberChange = True

            elif opts[i][0] == ("--18"):
                UI.normalWriteReadProcessing = False
                UI.makePrematureEOF = True

            elif opts[i][0] == ("--19"):
                UI.normalWriteReadProcessing = False
                UI.makeOnePassNumberChange = True

            elif opts[i][0] == ("--pt"):
                UI.pauseTime = float(opts[i][1])

            else:
                print ("")
                print (f"Invalid option {opts[i][0]} -- see help")
                print ("")
                x = 1/0
                
        # Assume no path given in file specification
        UI.dataFileLocation = ""
        # And file is in default directory
        UI.filenameInDecimalString = args[0]
        
        # Split off maybe path
        twoBits = args[0].rsplit("/", 1)
        if len(twoBits) == 2:
            UI.dataFileLocation = twoBits[0] + "/"
            UI.filenameInDecimalString = twoBits[1]
            
        # Validate file name - assume twoBits[0] is a valid path to the file
        # Make 10-digit filename
        if (len(UI.filenameInDecimalString) > 8) or (not UI.filenameInDecimalString.isnumeric()):
            print ("")
            print (f"Filename argument '{UI.filenameInDecimalString}' must be 1 - 8 character decimal number")
            print ("")
            x = 1/0

        UI.filenameInBinary = int(UI.filenameInDecimalString)
        UI.filenameInDecimalString = "%8.8d" % (UI.filenameInBinary)
        
        # End of processArgs
        return


    ########################################
    #
    # Write to screen if data file is located in the default directory
    #
    ########################################
    def updateScreen():

        if (UI.dataFileLocation == "") and (time.time() > (UI.screenUpdateTime + 2)):
        
            UI.screenUpdateTime = time.time()

            print ("\033[H\033[J")
            
            print (f"Current / max pass number = {Data.passNumber} / {Data.passesPerFile}")
            print (f"Run time = {int(time.time() - UI.startTime)}")
            print ("")
            
        return
        
        
    #########################################
    #
    # Start of "normal" write / read logic
    #
    #########################################
    def writeReadDataFile():

        while Data.passNumber < Data.passesPerFile:
        
            UI.updateScreen()

            # Always do next pass number
            Data.passNumber += 1

            dfd = open(UI.dataFileLocation + UI.filenameInDecimalString + ".ioeData", "w")

            # Start at the front of any existing file
            dfd.seek(0)

            # For records in file
            for recordNumber in range(Data.recordsPerFile):
            
                # Make the template and write it
                Data.makeRecordTemplate(UI.filenameInBinary, Data.passNumber, recordNumber)
                if UI.forceDataCompareFault:
                    dfd.write(Data.recordTemplate + "*")
                    UI.forceDataCompareFault = False
                else:
                    dfd.write(Data.recordTemplate)
                #dfd.flush()
                time.sleep(UI.pauseTime)

            dfd.close()
            
            # Read and verify records
            dfd = open(UI.dataFileLocation + UI.filenameInDecimalString + ".ioeData", "r")

            for recordNumber in range(Data.recordsPerFile):
            
                # Make the template / read / verify
                Data.makeRecordTemplate(UI.filenameInBinary, Data.passNumber, recordNumber)
                Data.recordData = dfd.read(Data.charsPerRecord)
                time.sleep(UI.pauseTime)

                if Data.recordData != Data.recordTemplate:
                
                    UI.dumpDataAndExit("Data compare error", 16)
                
            dfd.close()

        UI.dumpDataAndExit("Clean write / read run", 0)

    #
    # Handle various errors the same way
    #
    def dumpDataAndExit(msg, returnCode):
    
        Data.dumpDetails()

        print ("")
        print (msg)
        
        print (f"Exiting with return value = {returnCode}")
        print ("")
        exit (returnCode)


    ########################################
    #
    # Verify file after aborted I/O
    #
    ########################################
    def justVerifyDataFile():
    
        fixedPassNumberOnce = False

        # Look for the file to exist
        if not os.path.exists(UI.dataFileLocation + UI.filenameInDecimalString + ".ioeData"):
        
            UI.dumpDataAndExit("File missing", 20)

        # Verify the file has some data in it
        if os.path.getsize(UI.dataFileLocation + UI.filenameInDecimalString + ".ioeData") == 0:
        
            UI.dumpDataAndExit("Empty file", 21)

        # Verify the file is not too big
        if os.path.getsize(UI.dataFileLocation + UI.filenameInDecimalString + ".ioeData") > Data.charsPerFile:
        
            UI.dumpDataAndExit("File too large", 15)

        # Get some data and get the initial pass number
        dfd = open(UI.dataFileLocation + UI.filenameInDecimalString + ".ioeData", "r")
        someData = dfd.read(Data.charsPerRecord)
        someDataLines = someData.splitlines()
        (key, val) = someDataLines[1].split("=")
        dfd.close()

        # Look for possible invalid data at the front of the file
        if (len(someData) != Data.charsPerRecord) or (key.strip() != "Pass"):

            UI.dumpDataAndExit("Bad data at start of file", 22)
            
        # Set initial pass number
        initialPassNumber = int(val)
            
        # Read and verify records in the file
        dfd = open(UI.dataFileLocation + UI.filenameInDecimalString + ".ioeData", "r")

        # For each record
        for recordNumber in range(Data.recordsPerFile):
        
            # Make the template / read / verify
            Data.makeRecordTemplate(UI.filenameInBinary, initialPassNumber, recordNumber)
            Data.recordData = dfd.read(Data.charsPerRecord)
            
            if len(Data.recordData) == 0:
            
                UI.dumpDataAndExit("Clean premature EOF", 18)

            # See if data pattern matches
            badData = Data.recordData != Data.recordTemplate
            
            # If bad data after one fixup
            if (badData) and (fixedPassNumberOnce):
            
                UI.dumpDataAndExit("Data compare error after one pass number fixup", 14)
                
            # If bad data try a pass number fixup
            elif (badData) and (not fixedPassNumberOnce):
            
                fixedPassNumberOnce = True
                
                # See if the data works against last passes' number
                initialPassNumber -= 1
                
                Data.makeRecordTemplate(UI.filenameInBinary, initialPassNumber, recordNumber)

                if Data.recordData != Data.recordTemplate:
                
                    UI.dumpDataAndExit("Data compare error after first pass number fixup", 14)                
                
        dfd.close()
        
        if fixedPassNumberOnce:
            UI.dumpDataAndExit("Clean file verify after one pass number fixup", 19)
        else:
            UI.dumpDataAndExit("Clean file verify", 1)


    ########################################
    #
    # Make a short file - (18)
    #
    ########################################
    def makeShortFile():
    
        dfd = open(UI.dataFileLocation + UI.filenameInDecimalString + ".ioeData", "w")

        while Data.passNumber < Data.passesPerFile:
        
            # Always do next pass number
            Data.passNumber += 1

            # Start at the front of any existing file
            dfd.seek(0)

            # For records in file
            for recordNumber in range(Data.recordsPerFile):
            
                # Make the template record and write it
                Data.makeRecordTemplate(UI.filenameInBinary, Data.passNumber, recordNumber)
                dfd.write(Data.recordTemplate)
                
                # Stop after 3 records
                if recordNumber == 3:
                    UI.dumpDataAndExit("Create short file", 0)                


    ########################################
    #
    # Make a file with one passNumber inconsistency - (19)
    #
    ########################################
    def makeOnePassNumberChangeFile():
    
        dfd = open(UI.dataFileLocation + UI.filenameInDecimalString + ".ioeData", "w")

        while Data.passNumber < Data.passesPerFile:

            # Always do next pass number
            Data.passNumber += 1

            # Start at the front of any existing file
            dfd.seek(0)

            # For records in file
            for recordNumber in range(Data.recordsPerFile):
            
                # Make the template and write it
                Data.makeRecordTemplate(UI.filenameInBinary, Data.passNumber, recordNumber)
                dfd.write(Data.recordTemplate)
                
                # Exit with partly written file
                if (Data.passNumber == 3) and (recordNumber == 3):
                    UI.dumpDataAndExit("Create a one pass number change", 0)                


    ########################################
    #
    # Make a file with two passNumber inconsistency - (14)
    #
    ########################################
    def makeTwoPassNumberChangeFile():
    
        dfd = open(UI.dataFileLocation + UI.filenameInDecimalString + ".ioeData", "w")

        while Data.passNumber < Data.passesPerFile:

            # Always do next pass number
            Data.passNumber += 1

            # Start at the front of any existing file
            dfd.seek(0)

            # For records in file
            for recordNumber in range(Data.recordsPerFile):
            
                # Make the template and write it
                Data.makeRecordTemplate(UI.filenameInBinary, Data.passNumber, recordNumber)
                dfd.write(Data.recordTemplate)
                
                # Exit with partly written file
                if (Data.passNumber == 3) and (recordNumber == 3):

                    # Put a second pass number discontnuitY in the file
                    Data.makeRecordTemplate(UI.filenameInBinary, Data.passNumber - 1, recordNumber + 1)
                    dfd.write(Data.recordTemplate)

                    Data.makeRecordTemplate(UI.filenameInBinary, Data.passNumber - 1, recordNumber + 2)
                    dfd.write(Data.recordTemplate)

                    Data.makeRecordTemplate(UI.filenameInBinary, Data.passNumber - 2, recordNumber + 3)
                    dfd.write(Data.recordTemplate)

                    UI.dumpDataAndExit("Create a two pass number change", 0)                


if __name__ == "__main__":

    # Load in this program's code for in-line text processing
    InLineText.getCodeLines()
    
    # Process command line args
    UI.processArgs()
    
    # Init some of the various "Data" variables
    Data.initDataAttributes()
    
    # Track elapsed time
    UI.startTime = time.time()

    Data.dumpDetails(dumpData = False)

    # These routines all "exit" with specific codes

    if UI.normalWriteReadProcessing:
        UI.writeReadDataFile()

    if UI.justVerifyFile:
        UI.justVerifyDataFile()

    if UI.makePrematureEOF:
        UI.makeShortFile()
        
    if UI.makeOnePassNumberChange:
        UI.makeOnePassNumberChangeFile()
        
    if UI.makeTwoPassNumberChange:
        UI.makeTwoPassNumberChangeFile()
    

""" - Help
TBD
"""
