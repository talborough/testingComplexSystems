#!/usr/bin/python3

""" - Status

+++ - animalFarm_01 - Explore gDS functionality and operation

    V0101 - 01/22/2024 09:20 - Fix up for webinars. Change the name of the generated support routines.
    V0100 - 01/04/2024 07:48 - Initial version entry.
    
    Plans:
    
        Update to support webinars.
    
        (Done!!) At some point align (change) the names of the routines generated by gDSCodeGen.
        Note this will break all existing code until the names are adjusted.

---

"""

from multiprocessing import Process
from threading import Thread
from multiprocessing import Lock

import time
import random
import os
import sys

#
# Consume the gDS include file generated by gDSCodeGen if it exists and it's not out of date
#
if (not os.path.exists("./animalFarm_01.py")) or \
   (os.path.getmtime("./animalFarm_01.dd") >= os.path.getmtime("./animalFarm_01.py")):
    print ("")
    print ("./animalFarm_01.py does not exist or needs to be re-created using gDSCodeGen. Exiting.")
    print ("")
    sys.exit(1)
    
exec (open('animalFarm_01.py').read())


#
# Help control concurrent access to table rows.
#
class MasterLock:

    lockObject = Lock()

    def lock():
        
        MasterLock.lockObject.acquire()
        return
        
    def unlock():
    
        MasterLock.lockObject.release()
        return


#
# This routine is called by each spawned thread / process (activity) to
# add 1 animal row to the gAnimal table under lock.
#
def addOneAnimal(farmRef, animalType, animalNumber):

    # Each activity starts by sleeping for a random but bounded amount of time
    time.sleep(random.uniform(2.0, 8.0))

    # Convert the input to formatted text
    tempNumber = "%2.2d" % (animalNumber)
    
    # Add this animal under lock
    MasterLock.lock()
    
    animalRef = gAnimal_AddARow(_Type = animalType, _Name = f"{animalType} #{tempNumber}", \
                                _gFarm_Ref = farmRef, _RowStatus = "")
                                
    MasterLock.unlock()

    print (f"Added a {animalType} to {gFarm_Name[farmRef]}")


##################
# Main - Start by creating the counties and farms statically in mainline code
##################

if __name__ == "__main__":

    # No need to lock here!

    # Start with 2 counties
    countyRefA = gCounty_AddARow(_Name = "County A")
    countyRefB = gCounty_AddARow(_Name = "County B")

    # County A has 1 farm and County B has 2 farms
    farmRefA = gFarm_AddARow(_Name = "Farm A", _gCounty_Ref = countyRefA)

    farmRefB = gFarm_AddARow(_Name = "Farm B", _gCounty_Ref = countyRefB)

    farmRefC = gFarm_AddARow(_Name = "Farm C", _gCounty_Ref = countyRefB)
    
    print ("")
    print ("We just added 2 counties and 3 farms")


    #
    # Add some animals using a bunch of random activities
    #

    print ("")
    input ("Hit Enter to add gAnimal rows randomly: ")

    activities = []

    print ("")
    print ("Spawn 9 processes to add cows ...")
    for i in range(3):
        activities.append(Process(target = addOneAnimal, args = (farmRefA, "Cow", i+1)))
        activities[-1].start()
        activities.append(Process(target = addOneAnimal, args = (farmRefB, "Cow", i+1)))
        activities[-1].start()
        activities.append(Process(target = addOneAnimal, args = (farmRefC, "Cow", i+1)))
        activities[-1].start()
        
    print ("Spawn 30 threads to add chickens ... ")
    for i in range(10):
        activities.append(Thread(target = addOneAnimal, args = (farmRefA, "Chicken", i+1)))
        activities[-1].start()
        activities.append(Thread(target = addOneAnimal, args = (farmRefB, "Chicken", i+1)))
        activities[-1].start()
        activities.append(Thread(target = addOneAnimal, args = (farmRefC, "Chicken", i+1)))
        activities[-1].start()
        

    print ("")
    print (f"Started {len(activities)} activities total ...")
        
    print ("")
    print (f"Waiting for {len(activities)} activities to run randomly and complete ...")
    print ("")
        
    # Wait for all the activities to run (randomly) and complete
    for aProcess in activities:
        aProcess.join()
        

    print ("")
    print ("Done with adding animals!")
    print ("")

    # Dump all the tables
    print ("")
    input ("Hit Enter to dump Counties: ")
    print ("")
    gCounty_DumpRows()
    print ("")
    input ("Hit Enter to dump Farms: ")
    print ("")
    gFarm_DumpRows()
    print ("")
    input ("Hit Enter to dump Animals: ")
    print ("")
    gAnimal_DumpRows()

    print ("")
    input ("Hit Enter to print information about chickens in County B: ")
    print ("")
 
    # Criteria to print by
    animalTypeToPrint = "Chicken"
    countyNameToPrint = "County B"
    
    # A temporary list to print
    tempList = []

    # Get Ref of county to print
    countyRef = gCounty_Name2Ref[countyNameToPrint]
    
    # For all animals (Note - all concurrent activity is over - iterate on any column)
    for (animalRef, animalType) in enumerate(gAnimal_Type):
        # If correct animal type
        if animalType == animalTypeToPrint:
        
            # Get an intermediate value
            farmRef = gAnimal_gFarm_Ref[animalRef]
            # If the farm is in the right county
            if gFarm_gCounty_Ref[farmRef] == countyRef:
                # Append a line about the county / farm / animal
                tempList.append(f"County '{gCounty_Name[countyRef]}', farm '{gFarm_Name[farmRef]}' has animal '{gAnimal_Name[animalRef]}'")
              
    # Sort the resulting list and print it
    print ("")
    tempList.sort()
    
    for line in tempList:
        print (line)
        
    print ("")
    
    # Interactively print the details of a given animal
    inStr = "x"
    while inStr:
    
        print ("")
        inStr = input ("Enter a value for animalRef [def = stop]: ")
        
        if inStr:
            animalRef = int(inStr)
            
            # Dump individual table entries using cascading references
            print ("")
            gAnimal_DumpRows( [animalRef,] )
            
            print ("")
            gFarm_DumpRows( [gAnimal_gFarm_Ref[animalRef], ] )
            
            print ("")
            gCounty_DumpRows( [gFarm_gCounty_Ref[ gAnimal_gFarm_Ref[animalRef] ], ] )
