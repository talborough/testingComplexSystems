#!/usr/bin/python3

from multiprocessing import Process
from multiprocessing import Lock

import time
import random

# Consume file animalFarm_01.py - generated by running gDSCodeGen on animalFarm_01.dd (take a look at it!)
exec (open('animalFarm_01.py').read())

#
# For concurrency control
#
TheMasterLock = Lock()
def MasterLock(action):
    if action == "lock":
        TheMasterLock.acquire()
    else:
        TheMasterLock.release()
        
#
# Called by many processes to add (1) animal to a farm
#
def addOneAnimal (farmRef, animalType, animalNumber):

    # Called by each process, this gets them all running at random times over a 2 to 8 second interval
    time.sleep(random.uniform(2.0, 8.0))

    tempNumber = "%2.2d" % (animalNumber)
    # Add this animal
    animalRef = gAnimal_AddARowUnderLock(_Type = animalType, _Name = f"{animalType} #{tempNumber}", \
                                           _gFarm_Ref = farmRef, _RowStatus = "")

    print (f"Added a {animalType} to {gFarm_Name[farmRef]}")


##################
# Main - Start by creating the counties and farms statically in mainline code
##################

if __name__ == "__main__":

    # Start with 2 counties (each has 2 indices)
    countyRefA = gCounty_AddARowUnderLock(_Name = "County A")
    countyRefB = gCounty_AddARowUnderLock(_Name = "County B")

    # County A has 1 farm and County B has 2 farms
    farmRefA = gFarm_AddARow(_Name = "Farm A", _gCounty_Ref = countyRefA)

    farmRefB = gFarm_AddARow(_Name = "Farm B", _gCounty_Ref = countyRefB)

    farmRefC = gFarm_AddARow(_Name = "Farm C", _gCounty_Ref = countyRefB)
    
    print ("")
    print ("")
    print ("Added 2 counties and 3 farms")
    print ("")
    input ("Hit Enter to add animals randomly: ")

    #
    # Add some animals using a bunch of random processes
    #

    processes = []

    for i in range(3):
        processes.append(Process(target = addOneAnimal, args = (farmRefA, "Cow", i+1)))
        processes[-1].start()
        processes.append(Process(target = addOneAnimal, args = (farmRefB, "Cow", i+1)))
        processes[-1].start()
        processes.append(Process(target = addOneAnimal, args = (farmRefC, "Cow", i+1)))
        processes[-1].start()
        
    for i in range(10):
        processes.append(Process(target = addOneAnimal, args = (farmRefA, "Chicken", i+1)))
        processes[-1].start()
        processes.append(Process(target = addOneAnimal, args = (farmRefB, "Chicken", i+1)))
        processes[-1].start()
        processes.append(Process(target = addOneAnimal, args = (farmRefC, "Chicken", i+1)))
        processes[-1].start()
        
    print ("")
    print (f"Started {len(processes)} processes...")
    print ("")
        
    print ("")
    print (f"Waiting for {len(processes)} processes to complete...")
    print ("")
        
    # Wait for all the processes to complete
    for aProcess in processes:
        aProcess.join()
        
    print ("")
    print ("Done with adding animals!")
    print ("")

    # Dump all the tables
    print ("")
    input ("Hit Enter to dump Counties: ")
    print ("")
    gCounty_DumpTable()
    print ("")
    input ("Hit Enter to dump Farms: ")
    print ("")
    gFarm_DumpTable()
    print ("")
    input ("Hit Enter to dump Animals: ")
    print ("")
    gAnimal_DumpTable()

    print ("")
    print ("Print information about chickens in County B")
    print ("")
    
    input ("Hit Enter to continue: ")
    
    # Note - all activity is over - iterate on any column
    # Criteria to print by
    animalTypeToPrint = "Chicken"
    countyToPrintRef = gCounty_Name2Ref["County B"]
    
    tempList = []

    # For all animals
    for (animalRef, animalType) in enumerate(gAnimal_Type):
        # If correct animal type get farm index
        if animalType == animalTypeToPrint:
            farmRef = gAnimal_gFarm_Ref[animalRef]
            # If farm is in the right county
            if gFarm_gCounty_Ref[farmRef] == countyToPrintRef:
                tempList.append(f"County '{gCounty_Name[countyToPrintRef]}', farm '{gFarm_Name[farmRef]}' has animal '{gAnimal_Name[animalRef]}'")
                
    print ("")
    tempList.sort()
    for line in tempList:
        print (line)
    
    
    
    